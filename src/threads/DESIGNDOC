			+--------------------+
			|        CS 318      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yuxin Lu lyxin65@126.com

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1. In thread.h
struct thread {
    // ...
    int64_t time_to_sleep;  
    struct list_elem wait_elem; 
}

'time_to_sleep' is to record how many ticks left for the thread to sleep, it decreases
by 1 each tick.

2. In thread.c
static struct list wait_list;

A list of sleeping threads, willed be checked per sec.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep():
1. disable interrupts
2. set current thread's time_to_sleep to given value
3. Insert thread to wait_list, then block current thread
4. reset interrupt level

timer interrupt handler
1. disable interrupts
2. check per second and decrease timer of threads in the wait_list
3. if any thread need to be waken up, remove it from the list, and then unblock it.
4. reset interrupt level

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

If every sleeping thread's timer needs to be checked, the time can't be less.
Maybe it's a better way to mark the wakeup time of threads.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

List operations during interrupt is disabled.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

The interrupt is disabled.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

The number of sleeping threads are quite small,
maintaining a sorted list of sleeping threads will bring a bigger constant.
So I think it's better to be simple.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
    // ...
    int priority;  
    int old_priority;                   /* Add for priority donation */
    bool is_donated;                    /* Add for priority donation */

    struct lock *wait_lock;             /* add for priority donate */
    struct list locks;                   /* as above */

}

struct lock {
    int priority;
}

struct semaphore_elem {
    int priority;
}

old_priority store the base priority of the thread while temporary priority stores in priority if 
is_donate is true. If is_donate is false, the two is same.

lock's priority and semaphore's priority are their holder's priority.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

Nop.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

If thread holds the lock is not highest of priority, we will make it become highest of priority, then after it release the lock, the highest priority thread waiting for it will wake up first.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

First check the lock holder's priority, if it's lower than waiter, do donation.
then check the holder's waiting list, if it's waiting for another lock and the lock holder's priority is less than donated priority, donate.
repeat the process until lock is free or the lock holder's priority is greater or equal to donated priority.

there is a problem when nestd donation happens. How to set correct priority to each thread if one of the lock it holds is released? I choose to record the lock a thread have, and after every lock_release it will set the thread's priority to the max of the locks priority it hold.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

1. the higher-priority thread donate it's priority to current thread.
2. current thread wake up and release the lock.
3. current thread reset the priority, then yield.
4. the higher-priority thread wake up and get the lock.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

I disable interrupt when called thread_set_priority().

It's also ok to acquire a lock for the thread when modify a thread's priority.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

It's natural to do this.

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
